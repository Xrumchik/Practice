/*
Распределение пинов:
0 - Светодиод **
1 - Светодиод **
2 - Прерывание энкодера мотора А
3 - Прерывание энкодера мотора В
4 - Направление мотора А
5 - Скорость мотора А
6 - Скорость мотора В 
7 - Направление мотора В
8 - Trig
9 - Echo
10 - Кнопка *
11 - Светодиод *
12 - Энкодер мотора А
13 - Энкодер мотора В
A0 - Датчик линии левый
A1 - Датчик линии правый
A2 - Датчик расстояния правый
A3 - Датчик расстояния левый
A4 - Сервопривод большой
A5 - Сервопривод маленький

* - Данные элементы стоят для удобного контроля программы при ее выполнении(отладки), если нуждается, 
их можно снять и поставить какие-либо другие датчики
** - Данные элементы стоят на RХ и TX, поэтому для их корректного использование не следует их выводить в Serial порт
*/


#include "Arduino.h"

class Robot_reg {
  private:
    int pin_led1, pin_led2, pin_inter_enA, pin_inter_enB, dirA, dirB, spdA, spdB, trig, echo, pin_btn1, pin_led3,
    pin_enA, pin_enB, pin_lineL, pin_lineR, pin_distL, pin_distR, pin_servo_big, pin_servo_small; //пины
    volatile int tickL=0,tickR=0; //кол-во тиков на левом и правом энкодере
    int dspd; //скорость при повороте по энкодерам
    int grey, errold; // для пд регулятора
    int servo_so, servo_sc, servo_bu, servo_bd; //угол большого и маленького серво при верхнем и нижнем положении
    //и при закрытом и открытом соответственно 
    long duration, cmm; //для определения расстояния с hc-sr04
 
    float cm2tick,deg2tk;//скок тиков на см и скок тиков на градус
  public:
    Robot_reg(); //конструктор без параметров, все пины присваиваются переменным по умолчанию(как написано в комментарии вначале файла)
    void encoderL(); //считает тики на левом энкодере
    void encoderR(); //считает тики на правом энкодере
    void set_cm2tick(float number); //сетер на сколько тиков на сантиметр
    void set_deg2tk(float number);//сетер на сколько тиков на градус
    void set_dspd(float number); //сетер на скорость, при повороте по энкодерам
    void zero_tick(); //обнуляет счетчик тиков на моторах
    void check_tick(); //функция для проверки правильности подключения энкодера к ардуино(направление и ориентация)
    void turn(float degr); //поворот на заданный угол по энкодерам(больше 0 - через лево, меньше 0 - через право)
    void goStraight(float cm, bool stp = true); //проезд прямо в заданном направлении по энкодерам
    void move(int left,int right); //включение моторов для езды в диапазоне -100 - 100, без энкодеров(может косить)
    void test_reversed_motor(); //включение моторов в разных направлениях для проверки правильности подключения полярности моторов и их объявления
    void stop(); //остановка по энкодерам
  void show_all_system(/*мб добавить параметры*/); //вывод заданных показаний датчиков и счетчиков!!!!!!!!!!!!!!!!@+@+@+@
    void line(int spd,int p,int d);//pd регулятор для езды по линии(мб добавить i)!!!!!!!!!!!!!!!!!!!!!!!!
    void ncrossroad(int count); //езда до заданного по счету перекрестка по линии
    void to_open(); //открыть двухосевой захват(сверху с открытыми клешнями)
    void to_close(); //закрыть двухосевой захват(снизу с закрытыми клешнями)
    int distance_sharpL(); //определение растояния по датчику sharp(левый) и вывод растояния в диапазоне 0-1024
    int distance_sharpR(); //определение растояния по датчику sharp(правый) и вывод растояния в диапазоне 0-1024
    int distance_sharp_tocm(int number); //преобразование показаний датчика sharp из диапазона 0-1024 в сантиметры
    int distance_hcsr04(); //определение растояния по датчику hc-sr04 и вывод растояния в сантиметрах
    //мб добавить конструктор с параметрами и сетеры, гетеры мб тож надо!!!!!!!!!!!!!!!!!!!!!!!!!
};
